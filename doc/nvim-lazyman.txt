*nvim-lazyman.txt*Install, initialize, manage, and explore multiple Neovim configurations

NAME                                                       *nvim-lazyman-name*

lazyman - install, initialize, manage, and explore multiple Neovim
configurations


SYNOPSIS                                               *nvim-lazyman-synopsis*

lazyman [-A] [-a] [-b branch] [-c] [-d] [-e config] [-k] [-l] [-m] [-v] [-n]
[-q] [-P] [-I] [-L cmd] [-rR] [-C url] [-N nvimdir] [-U] [-y] [-u]


DESCRIPTION                                         *nvim-lazyman-description*

The `lazyman` command can be used to install, initialize, and manage multiple
Neovim configurations. Neovim configurations are installed and initialized in
separate subdirectories of `~/.config/` with associated separate subdirectories
in `~/.local/share/`, `~/.local/state/`, and `~/.cache/`.

The `lazyman` Neovim configuration is installed as `~/.config/nvim-lazyman` and
the `lazyman` command is installed as `~/.local/bin/lazyman`.

The Neovim configuration used by the `nvim` command is determined by the
`NVIM_APPNAME` environment variable (Neovim 0.9 and later only). Set the
`NVIM_APPNAME` environment variable in the shell initialization file (typically
`~/.bashrc` or `~/.zshrc`) by using the `export` shell builtin:

>bash
    export NVIM_APPNAME="<nvimdir>"
<

where `<nvimdir>` is the subdirectory in `~/.config/` that holds the desired
Neovim configuration. For example, to use the `LazyVim` Neovim configuration in
`~/.config/nvim-LazyVim/` the export command would be:

>bash
    export NVIM_APPNAME="nvim-LazyVim"
<

In addition to exporting NVIM_APPNAME in your shell initialization file, you
may wish to create aliases to execute with the various Neovim configurations
you have installed. For example, aliases could be created to use Neovim
configurations installed in `~/.config/nvim-LazyVim` and
`~/.config/nvim-LunarVim` as follows:

>bash
    alias nvim-lazy="NVIM_APPNAME=nvim-LazyVim nvim"
    alias nvim-lunar="NVIM_APPNAME=nvim-LunarVim nvim"
<

After sourcing these aliases in your shell, to invoke Neovim with the LazyVim
configuration run `nvim-lazy filename.py` and to invoke Neovim with the
LunarVim config run `nvim-lunar proposal.md`.

An example `~/.aliases` file might include:

>bash
    command -v nvim > /dev/null && {
      alias vi='nvim'
      items=("default")
      [ -d $HOME/.config/nvim-lazyman ] && {
        alias nvim-lazy="NVIM_APPNAME=nvim-lazyman nvim"
        items+=("lazyman")
      }
      [ -d $HOME/.config/nvim-LazyVim ] && {
        alias nvim-lazy="NVIM_APPNAME=nvim-LazyVim nvim"
        items+=("LazyVim")
      }
      [ -d $HOME/.config/nvim-Kickstart ] && {
        alias nvim-kick="NVIM_APPNAME=nvim-Kickstart nvim"
        items+=("Kickstart")
      }
      [ -d $HOME/.config/nvim-NvChad ] && {
        alias nvim-chad="NVIM_APPNAME=nvim-NvChad nvim"
        items+=("NvChad")
      }
      [ -d $HOME/.config/nvim-AstroNvim ] && {
        alias nvim-astro="NVIM_APPNAME=nvim-AstroNvim nvim"
        items+=("AstroNvim")
      }
      [ -d $HOME/.config/nvim-Allaman ] && {
        alias nvim-aman="NVIM_APPNAME=nvim-Allaman nvim"
        items+=("Allaman")
      }
      [ -d $HOME/.config/nvim-LunarVim ] && {
        alias nvim-lunar="NVIM_APPNAME=nvim-LunarVim nvim"
        items+=("LunarVim")
      }
      [ -d $HOME/.config/nvim-MultiVim ] && {
        alias nvim-multi="NVIM_APPNAME=nvim-MultiVim nvim"
        items+=("MultiVim")
      }
    
      function nvims() {
        config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=60% --layout=reverse --border --exit-0)
        if [[ -z $config ]]; then
          echo "Nothing selected"
          return 0
        elif [[ $config == "default" ]]; then
          config=""
        else
          config="nvim-${config}"
        fi
        NVIM_APPNAME=$config nvim $@
      }
      bindkey -s ^a "nvims\n"
    }
<

In the above example `$HOME/.aliases` file for `zsh` users I have included a
shell function, `nvims` borrowed from the excellent Neovim switching video
produced by Elijah Manor <https://github.com/elijahmanor>. This function
produces a fuzzy searchable list of the installed supported Neovim configs.
Invoking `nvims` can be an easy way to select which configuration to use for
this execution of Neovim. Thanks Elijah!

A similar `nvims` function for `bash` users (with the `items` array constructed
as above) might be something like:

>bash
    nvims() {
      config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config  " --height=60% --layout=reverse --border --exit-0)
      if [[ -z $config ]]; then
        echo "Nothing selected"
        return 0
      elif [[ $config == "default" ]]; then
        config=""
      else
        config="nvim-${config}"
      fi
      NVIM_APPNAME=$config nvim $@
    }
<

Another alternative to setting `NVIM_APPNAME` in the environment or with an
alias is to use the `lazyman` command to specify which Neovim configuration to
use with this invocation. This is done using the `-e config` option to
`lazyman`. When invoking `lazyman` with the `-e config` argument, the Neovim
configuration can be specified by setting `config` to one of `allaman`,
`astronvim`, `kickstart`, `lazyman`, `lazyvim`, `lunarvim`, `nvchad`, or any
Neovim configuration directory in `~/.config`. For example, to edit the file
`foo.lua` using the LazyVim Neovim configuration:

>bash
    lazyman -e lazyvim foo.lua
<

When invoked with the `-e config` option, `lazyman` sets the `NVIM_APPNAME`
environment variable to the specified `config` and executes `nvim` with all
following arguments. This is a pretty easy way to explore all the `lazyman`
installed and initialized Neovim configurations.


OPTIONS                                                 *nvim-lazyman-options*

The following command line options are available with the `lazyman` command:

`-A` : indicates install all supported Neovim configurations

`-a` : indicates install and initialize the the 'AstroNvim' Neovim
configuration

`-b branch` : specifies an nvim-lazyman git branch to checkout

`-c` : indicates install and initialize the 'NvChad' Neovim configuration

`-d` : indicates debug mode

`-e 'config'` : execute 'nvim' with 'config' Neovim configuration where
'config' can be one of 'lazyman', 'allaman', 'astronvim', 'kickstart',
'lazyvim', 'lunarvim', or any Neovim configuration directory in '~/.config'.
For example, 'lazyman -e lazyvim foo.lua' would edit 'foo.lua' with the LazyVim
config

`-k` : indicates install and initialize the 'Kickstart' Neovim configuration

`-l` : indicates install and initialize the 'LazyVim' Neovim configuration

`-m` : indicates install and initialize the 'Allaman' Neovim configuration

`-v` : indicates install and initialize the 'LunarVim' Neovim configuration

`-I` : indicates install language servers and tools for coding diagnostics

`-L cmd` : specifies a Lazy command to run

`-n` : indicates dry run, don’t actually do anything, just printf’s

`-p` : indicates use Packer rather than Lazy to initialize

`-q` : indicates quiet install

`-r` : indicates remove the previously installed configuration

`-R` : indicates remove previously installed configuration and backups

`-C url` : specifies a URL to a Neovim configuration git repository

`-N nvimdir` : specifies the folder name to use for the config given by -C

`-U` : indicates update an existing configuration

`-y` : indicates do not prompt, answer 'yes' to any prompt

`-u` : displays this usage message and exits

Commands act on `NVIM_APPNAME`, override with '-N nvimdir' or '-A'

Without arguments lazyman installs and initializes nvim-lazyman


EXAMPLES ~

`lazyman -a` : installs and initializes the `AstroNvim` Neovim configuration in
`$HOME/.config/nvim-AstroNvim/`

`lazyman -l` : installs and initializes the `LazyVim` Neovim configuration in
`$HOME/.config/nvim-LazyVim/`

`lazyman -A` : installs and initializes all supported Neovim configurations

`lazyman -I` : installs language servers and tools for coding diagnostics

`lazyman -L update` : runs the `:Lazy update` command in the active Neovim
configuration (combine with -N or -A to override)

`lazyman -U -N nvim-LazyVim` : updates the `LazyVim` Neovim configuration in
`$HOME/.config/nvim-LazyVim/`

`lazyman -A -U` : updates all installed supported Neovim configurations

`lazyman -P -C https://github.com/Abstract-IDE/Abstract -N nvim-Abstract` :
installs and initializes the Packer based 'Abstract' Neovim configuration in
`~/.config/nvim-Abstract`

`lazyman -R -N nvim-LazyVim` : removes the `LazyVim` Neovim configuration in
`$HOME/.config/nvim-LazyVim/`, its data files, cache, state, and all backups


CONFIGURATION                                     *nvim-lazyman-configuration*

In addition to the `lazyman` command, the Lazyman distribution includes a
richly preconfigured Neovim configuration in `~/.config/nvim-lazyman`. The
Lazyman Neovim configuration includes a top-level configuration file,
`~/.config/nvim-lazyman/lua/configuration.lua`. This file can be use to enable,
disable, and configure `nvim-lazyman` components. For example, here is where
you would configure whether `neo-tree` or `nvim-tree` is enabled as a file
explorer. Or, disable the `tabline`, disable the `statusline`, set the
`colorscheme`, `theme`, and theme style. The `configuration.lua` file is
intended to serve as a quick and easy way to re-configure the `nvim-lazyman`
Neovim configuration but you can still dig down into the `options.lua`,
`keymaps.lua`, `autocmds.lua` and more.


CONFIGURATION SECTIONS ~

The `lua/configuration.lua` configuration file contains the following sections
with settings briefly described here:


THEME CONFIGURATION

The `nvim-lazyman` Neovim configuration includes pre-configured support for
several themes including support for statusline and tabline theme coordination.
The active theme and colorscheme is selected in `configuration.lua` by setting
`conf.theme`. For themes that support different styles, the theme style is
selected by setting `conf.theme_style`. Theme transparency can be enabled with
`conf.enable_transparent`. For example, to use the `kanagawa` theme with
`dragon` style and transparency disabled, set:

>
    conf.theme = "kanagawa"
    conf.theme_style = "dragon"
    conf.enable_transparent = false
<


SUPPORTED THEMES


- catppuccin <https://github.com/catppuccin/nvim.git>
- everforest <https://github.com/neanias/everforest-nvim.git>
- kanagawa <https://github.com/rebelot/kanagawa.nvim.git>
- monokai-pro <https://github.com/loctvl842/monokai-pro.nvim.git>
- nightfox <https://github.com/EdenEast/nightfox.nvim.git>
- onedarkpro <https://github.com/olimorris/onedarkpro.nvim.git>
- tokyonight <https://github.com/folke/tokyonight.nvim.git>
- tundra <https://github.com/sam4llis/nvim-tundra.git>

A configuration file for each theme is in `lua/themes/` and lualine theme
configuration for each theme and its styles in `lua/themes/lualine`.

Use `<F8>` to step through themes.

Available styles are:


- kanagawa
    - wave
    - dragon
    - lotus
- tokyonight
    - night
    - storm
    - day
    - moon
- onedarkpro
    - onedark
    - onelight
    - onedark_vivid
    - onedark_dark
- monokai-pro
    - classic
    - octagon
    - pro
    - machine
    - ristretto
    - spectrum
- catppuccin
    - latte
    - frappe
    - macchiato
    - mocha
- nightfox
    - carbonfox
    - dawnfox
    - dayfox
    - duskfox
    - nightfox
    - nordfox
    - terafox


PLUGIN CONFIGURATION

Several Neovim plugins in the `nvim-lazyman` configuration can be optionally
installed or replaced by another plugin with similar functionality. The plugins
that are configurable in this way in `configuration.lua` are briefly described
below along with their default settings:


- Neovim session manager to use, either persistence or possession
    - `conf.session_manager = "possession"`
- Neo-tree or nvim-tree, false will enable nvim-tree
    - `conf.enable_neotree = true`
- Replace the UI for messages, cmdline and the popupmenu
    - `conf.enable_noice = true`
- Enable ChatGPT (set `OPENAI_API_KEY` environment variable)
    - `conf.enable_chatgpt = false`
- Enable the newer rainbow treesitter delimiter highlighting
    - `conf.enable_rainbow2 = true`
- Enable the wilder plugin
    - `conf.enable_wilder = false`
- The statusline (lualine) and tabline can each be enabled or disabled
    - `conf.disable_statusline = false`
    - `conf.enable_tabline = true`
- The winbar with location
    - `conf.enable_winbar = false`
- Enable playing games inside Neovim!
    - `conf.enable_games = true`
- Enable the Alpha dashboard
    - `conf.enable_alpha = true`
- Enable the Neovim bookmarks plugin  <https://github.com/ldelossa/nvim-id>
    - `conf.enable_bookmarks = false`
- Enable the Neovim IDE plugin  <https://github.com/ldelossa/nvim-id>
    - `conf.enable_ide = false`
- Enable Navigator
    - `conf.enable_navigator = true`
- Enable Project manager
    - `conf.enable_project = true`
- Enable window picker
    - `conf.enable_picker = true`
- Show diagnostics, can be one of "none", "icons", "popup". Default is "popup"
    - `conf.show_diagnostics = "icons"`

Additional plugin configuration and options are available in
`configuration.lua`.

The default `configuration.lua`:

>lua
    local conf = {}
    
    -- THEME CONFIGURATION
    -- Available themes:
    --   monokai-pro, nightfox, tokyonight, kanagawa, catppuccin, tundra, onedarkpro, everforest
    -- A configuration file for each theme is in lua/themes/
    -- Use <F8> to step through themes
    conf.theme = "tokyonight"
    -- Available styles are:
    --   kanagawa:    wave, dragon, lotus
    --   tokyonight:  night, storm, day, moon
    --   onedarkpro:  onedark, onelight, onedark_vivid, onedark_dark
    --   monokai-pro: classic, octagon, pro, machine, ristretto, spectrum
    --   catppuccin:  latte, frappe, macchiato, mocha
    --   nightfox:    carbonfox, dawnfox, dayfox, duskfox, nightfox, nordfox, terafox
    conf.theme_style = "moon"
    -- enable transparency if the theme supports it
    conf.enable_transparent = true
    
    -- GLOBAL OPTIONS CONFIGURATION
    -- Some prefer space as the map leader, but why
    conf.mapleader = ","
    conf.maplocalleader = ","
    -- Toggle global status line
    conf.global_statusline = true
    -- set numbered lines
    conf.number = false
    -- enable mouse see :h mouse
    conf.mouse = "nv"
    -- set relative numbered lines
    conf.relative_number = false
    -- always show tabs; 0 never, 1 only if at least two tab pages, 2 always
    -- see enable_tabline below to disable or enable the tabline
    conf.showtabline = 2
    -- enable or disable listchars
    conf.list = true
    -- which list chars to show
    conf.listchars = {
      eol = "⤶",
      tab = ">.",
      trail = "~",
      extends = "◀",
      precedes = "▶",
    }
    -- use rg instead of grep
    conf.grepprg = "rg --hidden --vimgrep --smart-case --"
    
    -- ENABLE/DISABLE/SELECT PLUGINS
    -- neovim session manager to use, either persistence or possession
    conf.session_manager = "possession"
    -- neo-tree or nvim-tree, false will enable nvim-tree
    conf.enable_neotree = true
    -- Replace the UI for messages, cmdline and the popupmenu
    conf.enable_noice = true
    -- Enable ChatGPT (set OPENAI_API_KEY environment variable)
    conf.enable_chatgpt = true
    -- Enable the newer rainbow treesitter delimiter highlighting
    conf.enable_rainbow2 = true
    -- Enable fancy lualine components
    conf.enable_fancy = true
    -- Enable the wilder plugin
    conf.enable_wilder = false
    -- The statusline (lualine) and tabline can each be enabled or disabled
    -- Disable statusline (lualine)
    conf.disable_statusline = false
    -- Enable tabline
    conf.enable_tabline = true
    -- Disable winbar with location
    conf.enable_winbar = false
    -- Enable playing games inside Neovim!
    conf.enable_games = true
    -- Enable the Alpha dashboard
    conf.enable_alpha = true
    -- enable the Neovim bookmarks plugin (https://github.com/ldelossa/nvim-ide)
    conf.enable_bookmarks = false
    -- enable the Neovim IDE plugin (https://github.com/ldelossa/nvim-ide)
    conf.enable_ide = false
    -- Enable Navigator
    conf.enable_navigator = true
    -- Enable Project manager
    conf.enable_project = true
    -- Enable window picker
    conf.enable_picker = true
    
    -- PLUGINS CONFIGURATION
    -- media backend, one of "ueberzug"|"viu"|"chafa"|"jp2a"|catimg
    conf.media_backend = "jp2a"
    -- Number of recent files shown in dashboard
    -- 0 disables showing recent files
    conf.dashboard_recent_files = 5
    -- disable the header of the dashboard
    conf.disable_dashboard_header = true
    -- disable quick links of the dashboard
    conf.disable_dashboard_quick_links = false
    -- treesitter parsers to be installed
    conf.treesitter_ensure_installed = {
      "bash", "cmake", "css", "dockerfile", "go", "html", "java",
      "javascript", "json", "lua", "markdown", "markdown_inline",
      "query", "python", "regex", "toml", "vim", "yaml",
    }
    -- Enable clangd or ccls will be used for C/C++ diagnostics
    conf.enable_clangd = false
    -- LSPs that should be installed by Mason-lspconfig
    conf.lsp_servers = {
      "bashls", "dockerls", "jsonls", "ltex", "marksman", "pyright",
      "lua_ls", "terraformls", "texlab", "tsserver", "yamlls",
    }
    -- Tools that should be installed by Mason
    conf.tools = {
      -- Formatter
      "black", "prettier", "stylua", "shfmt",
      -- Linter
      "eslint_d", "shellcheck", "tflint", "yamllint", "ruff",
      -- DAP
      "debugpy",
    }
    -- enable greping in hidden files
    conf.telescope_grep_hidden = true
    -- which patterns to ignore in file switcher
    conf.telescope_file_ignore_patterns = {
      "%.7z", "%.MOV", "%.RAF", "%.burp", "%.bz2", "%.cache", "%.class",
      "%.dll", "%.docx", "%.dylib", "%.epub", "%.exe", "%.flac", "%.ico",
      "%.ipynb", "%.jar", "%.lock", "%.mkv", "%.mov", "%.mp4", "%.otf",
      "%.pdb", "%.rar", "%.sqlite3", "%.svg", "%.tar", "%.tar.gz", "%.zip",
      ".git/", ".gradle/", ".idea/", ".settings/", ".vale/", ".vscode/",
      "__pycache__/*", "build/", "env/", "gradle/", "node_modules/",
      "smalljre_*/*", "target/", "vendor/*",
    }
    -- Show diagnostics, can be one of "none", "icons", "popup". Default is "popup"
    --   "none":  diagnostics are disabled but still underlined
    --   "icons": only an icon will show, use ',de' to see the diagnostic
    --   "popup": an icon will show and a popup with the diagnostic will appear
    conf.show_diagnostics = "icons"
    
    return conf
<


AUTHORS                                                 *nvim-lazyman-authors*

Written by Ronald Record `github@ronrecord.com`


LICENSING                                             *nvim-lazyman-licensing*

LAZYMAN is distributed under an Open Source license. See the file LICENSE in
the LAZYMAN source distribution for information on terms & conditions for
accessing and otherwise using LAZYMAN and for a DISCLAIMER OF ALL WARRANTIES.


BUGS                                                       *nvim-lazyman-bugs*

Submit bug reports online at:

https://github.com/doctorfree/nvim-lazyman/issues

Full documentation and sources at:

https://github.com/doctorfree/nvim-lazyman

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
