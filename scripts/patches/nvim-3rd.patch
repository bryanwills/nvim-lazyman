--- lua/modules/language-support/tree-sitter.lua.orig	2023-06-02 15:09:24.598125966 -0700
+++ lua/modules/language-support/tree-sitter.lua	2023-06-02 15:12:53.608693775 -0700
@@ -25,7 +25,7 @@
     "rust",
     "scss",
     "svelte",
-    "syslang",
+    -- "syslang",
     "toml",
     "tsx",
     "typescript",
@@ -98,15 +98,15 @@
   local treesitter = require("nvim-treesitter.configs")

   local parser_config = require("nvim-treesitter.parsers").get_parser_configs()
-  parser_config.syslang = {
-    install_info = {
-      url = "~/brain/core/syslang/tree-sitter-syslang",
-      files = { "src/parser.c", "src/scanner.cc" },
-      generate_requires_npm = false,
-      requires_generate_from_grammar = true,
-    },
-    filetype = "syslang",
-  }
+  -- parser_config.syslang = {
+  --   install_info = {
+  --     url = "~/brain/core/syslang/tree-sitter-syslang",
+  --     files = { "src/parser.c", "src/scanner.cc" },
+  --     generate_requires_npm = false,
+  --     requires_generate_from_grammar = true,
+  --   },
+  --   filetype = "syslang",
+  -- }

   treesitter.setup(config)

@@ -125,16 +125,16 @@
       })
     end,
   })
-  vim.api.nvim_create_autocmd("FileType", {
-    group = vim.api.nvim_create_augroup("tsnode-marker-syslang", {}),
-    pattern = "syslang",
-    callback = function(ctx)
-      require("tsnode-marker").set_automark(ctx.buf, {
-        target = { "code_block" }, -- list of target node types
-        hl_group = "@slang.code_block_fence", -- highlight group
-      })
-    end,
-  })
+  -- vim.api.nvim_create_autocmd("FileType", {
+  --   group = vim.api.nvim_create_augroup("tsnode-marker-syslang", {}),
+  --   pattern = "syslang",
+  --   callback = function(ctx)
+  --     require("tsnode-marker").set_automark(ctx.buf, {
+  --       target = { "code_block" }, -- list of target node types
+  --       hl_group = "@slang.code_block_fence", -- highlight group
+  --     })
+  --   end,
+  -- })
 end

 return lib.module.create({
--- lua/modules/language-support/null-ls.lua.00	2023-07-26 13:27:59.248237174 -0700
+++ lua/modules/language-support/null-ls.lua	2023-07-26 13:28:18.580483106 -0700
@@ -4,8 +4,6 @@

   local paths = {
     stylua_config = lib.path.resolve_config("linters/stylua.toml"),
-    eslint_config = lib.path.resolve_config("linters/eslint/dist/main.js"),
-    eslint_node_modules = lib.path.resolve_config("linters/eslint/node_modules"),
     prettier_config = lib.path.resolve_config("linters/prettier.json"),
   }

--- lua/modules/language-support/lsp.lua.00	2023-07-26 13:25:42.978505006 -0700
+++ lua/modules/language-support/lsp.lua	2023-07-26 13:27:16.923698907 -0700
@@ -1,7 +1,7 @@
 local config = {
   -- override client.server_capabilities.documentFormattingProvider
   formatting = {
-    enable = { "eslint" },
+    enable = {},
     disable = { "html" },
   },
 }
@@ -27,7 +27,6 @@
   "cssls",
   "cssmodules_ls",
   "dockerls",
-  "eslint",
   "golangci_lint_ls",
   "gopls",
   "html",
@@ -240,38 +239,6 @@
           },
         },
       },
-      eslint = {
-        filetypes = {
-          "javascript",
-          "javascriptreact",
-          "javascript.jsx",
-          "typescript",
-          "typescriptreact",
-          "typescript.tsx",
-          "vue",
-          "svelte",
-          "graphql",
-        },
-        settings = {
-          codeAction = {
-            disableRuleComment = { enable = true, location = "separateLine" },
-            showDocumentation = { enable = true },
-          },
-          -- experimental = { useFlatConfig = true },
-          nodePath = lib.path.resolve_config("linters/eslint/node_modules"),
-          onIgnoredFiles = "off",
-          options = {
-            cache = true,
-            fix = true,
-            overrideConfigFile = lib.path.resolve_config("linters/eslint/dist/main.js"),
-            resolvePluginsRelativeTo = lib.path.resolve_config("linters/eslint/node_modules"),
-            useEslintrc = false,
-          },
-          packageManager = "npm",
-          run = "onType",
-          workingDirectory = { mode = "auto" },
-        },
-      },
       prismals = {},
       jsonls = {
         init_options = {
@@ -329,9 +296,6 @@
       lib.map.map(mode, lhs, rhs, opts)
     end

-    -- if client.name == "eslint" then client.server_capabilities.documentFormattingProvider = true end
-    -- log(client.name, client.server_capabilities.documentFormattingProvider)
-
     -- override client.server_capabilities.documentFormattingProvider
     if vim.tbl_contains(config.formatting.enable, client.name) then
       client.server_capabilities.documentFormattingProvider = true
